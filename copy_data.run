#!/bin/bash

# Cd into our working directory in case we're not into it already
cd "$(dirname "$0")";

echo "-----------------------------------------------------------------------------------------"
echo "COSMO-D2: Starting processing of icon model data - `date`"
echo "-----------------------------------------------------------------------------------------"

# Folder to be used to download and process data
export MODEL_DATA_FOLDER="/tmp/cosmo-d2/"
export HOME_FOLDER=$(pwd)
export N_CONCUR_PROCESSES=8
export NCFTP_BOOKMARK="altervista"
DATA_DOWNLOAD=true
DATA_PLOTTING=true
DATA_UPLOAD=true

##### LOAD functions to download model data
. ./functions_download_dwd.sh
export SHELL=$(type -p bash)
# We need to open many files at the same time
ulimit -Sn 4096
########################################### 

# Retrieve run ##########################
latest_run=`python get_last_run.py`
if [ -f $MODEL_DATA_FOLDER/last_processed_run.txt ]; then
	latest_processed_run=`while read line; do echo $line; done < $MODEL_DATA_FOLDER/last_processed_run.txt`
	if [ $latest_run -gt $latest_processed_run ]; then
		echo "New run ${latest_run} found! Last processed run was ${latest_processed_run}."
	else
		echo "Run ${latest_processed_run} already processed, exiting"
		exit 0
	fi
fi

export year=${latest_run:0:4} 
export month=${latest_run:4:2} 
export day=${latest_run:6:2} 
export run=${latest_run:8:2}

###########################################

mkdir -p ${MODEL_DATA_FOLDER}it
mkdir -p ${MODEL_DATA_FOLDER}nord
# Move to the data folder to do processing
cd ${MODEL_DATA_FOLDER} || { echo 'Cannot change to DATA folder' ; exit 1; }

# SECTION 1 - DATA DOWNLOAD ############################################################

if [ "$DATA_DOWNLOAD" = true ]; then
	echo "-----------------------------------------------------------------------------------------"
	echo "cosmo-d2: Starting downloading of data - `date`"
	echo "-----------------------------------------------------------------------------------------"
	# Remove older files
	rm ${MODEL_DATA_FOLDER}*.nc
	rm ${MODEL_DATA_FOLDER}*.grib2

	# Invariant
	download_invariant_cosmo_d2

	#2-D variables
	variables=("T_2M" "TD_2M" "U_10M" "V_10M" "PMSL" "CAPE_ML" "VMAX_10M" "TOT_PREC" \
	"CLCL" "CLCH" "CLCT" "SNOWLMT" "HZEROCL" "H_SNOW" "SNOW_GSP"\
	"RAIN_GSP" "TMAX_2M" "TMIN_2M" "WW" "DBZ_CMAX" "CIN_ML" "RELHUM_2M" )
	parallel -j 8 --delay 1 download_merge_2d_variable_cosmo_d2 ::: "${variables[@]}"

	#3-D variables on pressure levels
	variables=("T" "FI" "RELHUM" "U" "V")
	parallel -j 8 --delay 2 download_merge_3d_variable_cosmo_d2 ::: "${variables[@]}"

fi 

############################################################


# SECTION 2 - DATA PLOTTING ############################################################

if [ "$DATA_PLOTTING" = true ]; then
	echo "-----------------------------------------------------------------------------------------"
	echo "cosmo-d2: Starting plotting of data - `date`"
	echo "-----------------------------------------------------------------------------------------"
	python --version
	cp ${HOME_FOLDER}/plotting/*.py ${MODEL_DATA_FOLDER}

	export QT_QPA_PLATFORM=offscreen # Needed to avoid errors when using Python without display

	python plot_meteogram.py Hamburg Pisa Milano Brocken Toulouse Utrecht

	scripts=("plot_cape.py" "plot_hsnow.py" "plot_pres_t2m_winds10m.py" "plot_rain_clouds.py" "plot_rain_acc.py"\
		     "plot_reflectivity.py" "plot_relhum.py" "plot_t.py" "plot_t850_pres.py" "plot_winds10m.py"\
		     "plot_winter.py" "plot_tmax.py")

	projections=("de" "it" "nord")

	parallel -j 5 python ::: "${scripts[@]}" ::: "${projections[@]}"
	rm ${MODEL_DATA_FOLDER}*.py
fi

############################################################

# If we at least produced some netcdf and images we assume the run is succesfull and 
# store the run processed in a text file. Unfortunately there is no easy way to check
# if the processing is really succesfull as we have many errors in the process that
# don't undermine the whole processing! 

N_NETCDF_FILES=`find . -type f -name '*.nc' -printf x | wc -c`
N_IMAGES=`find . -type f -name '*.png' -printf x | wc -c`

if [ $N_NETCDF_FILES -ge 2 ] && [ $N_IMAGES -ge 10 ]; then
	echo $year$month$day$run > last_processed_run.txt
fi


# SECTION 3 - IMAGES UPLOAD ############################################################
# Use ncftpbookmarks to add a new FTP server with credentials
if [ "$DATA_UPLOAD" = true ]; then
	echo "-----------------------------------------------------------------------------------------"
	echo "cosmo-d2: Starting FTP uploading - `date`"
	echo "-----------------------------------------------------------------------------------------"
	# First upload meteograms
	ncftpput -R -v -DD -m ${NCFTP_BOOKMARK} cosmo_de_forecasts/meteograms meteogram_*
	#
	# Then upload the other pictures
	#
	images_output=("cape_cin" "radar" "t850_pres" "t_v_pres" "winds10m" "precip_clouds"\
		"hsnow" "rh_500" "rh_700" "rh_850" "rh_950" "t_500" "t_700" "t_850" "t_950"\
		"winter" "precip_acc" "tmax")

	# suffix for naming
	projections_output=("" "it/" "nord/")
	# remote folder on server
	projections_output_folder=("cosmo_de_forecasts" "cosmo_de_forecasts/it" "cosmo_de_forecasts/nord")

	# Create a lisf of all the images to upload 
	upload_elements=()
	for i in "${!projections_output[@]}"; do
		for j in "${images_output[@]}"; do
				upload_elements+=("${projections_output_folder[$i]}/${j} ./${projections_output[$i]}${j}_*")
		done
	done


	for k in "${upload_elements[@]}"; do
		ncftpput -R -v -DD -m ${NCFTP_BOOKMARK} ${k}
	done

	# Can't figure it out why the parallel version does not work
	#parallel -j 1 --link ncftpput -R -v ${NCFTP_BOOKMARK} ::: ${upload_folder[@]} ::: ${upload_elements[@]}

	rm ${MODEL_DATA_FOLDER}*.png
	rm ${MODEL_DATA_FOLDER}nord/*.png
	rm ${MODEL_DATA_FOLDER}it/*.png
fi 

# SECTION 4 - CLEANING ############################################################

#Remove images locally


echo "-----------------------------------------------------------------------------------------"
echo "cosmo-d2: Finished processing run ${year}${month}${day}${run} - `date`"
echo "-----------------------------------------------------------------------------------------"

############################################################

cd -
